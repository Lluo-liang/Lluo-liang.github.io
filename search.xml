<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>01_使用Hexo搭建一个博客网站</title>
    <url>//post/01_-use-hexo-to-build-a-blog-website-2qcjw6.html</url>
    <content><![CDATA[<h1 id="01-使用Hexo搭建一个博客网站"><a href="#01-使用Hexo搭建一个博客网站" class="headerlink" title="01_使用Hexo搭建一个博客网站"></a>01_使用Hexo搭建一个博客网站</h1><h3 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h3><p><a href="https://hexo.io/zh-cn/">hexo 官网</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>使用 npm 安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>初始化某个项目文件（新建目录）</p>
<p>进入目录后  hexo init</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init  # 博客初始化 (安装所需要的包)</span><br></pre></td></tr></table></figure>

<p>目录结构</p>
<p>​<code>public</code>​目录下存放的是我们生成的<strong>「静态页面」</strong>；</p>
<p>​<code>source/_posts</code>​目录下存放的是我们写的<strong>「文章」</strong>；</p>
<p>​<code>themes</code>​目录下存放的是<strong>「博客」</strong>的主题；</p>
<p>​<code>_config.yml</code>​是<strong>「博客全局配置」</strong>文件；</p>
<p>​<code>_config.landscape.yml</code>​是<strong>「博客主题配置」</strong>文件</p>
<p>‍</p>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>本地运行  hexo s</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s # http://localhost:4000/预览</span><br></pre></td></tr></table></figure>

<p>​<img src="https://blogpublishpicture.oss-cn-guangzhou.aliyuncs.com/cnblogs/202306051602679.png" alt="image">​</p>
<p>访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure>

<p>​<img src="https://blogpublishpicture.oss-cn-guangzhou.aliyuncs.com/cnblogs/202306051602981.png" alt="image">​</p>
<p>‍</p>
<h4 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h4><p>运行路径下执行命令 hexo n：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;第一篇博客&quot; # 新建一个名为第一篇博客.md的文件</span><br></pre></td></tr></table></figure>

<p>‍</p>
<p>‍</p>
<h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><h4 id="搭建基于ocean-主题的站点"><a href="#搭建基于ocean-主题的站点" class="headerlink" title="搭建基于ocean 主题的站点"></a>搭建基于ocean 主题的站点</h4><p><a href="https://www.zhwangart.com/">首页（主题网站）</a></p>
<p><a href="https://github.com/zhwangart/hexo-theme-ocean">ocean GiteHub地址</a></p>
<p><a href="https://www.zhwangart.com/2018/11/30/Ocean/">ocean主题安装指导文档</a></p>
<h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zhwangart/hexo-theme-ocean.git themes/ocean</span><br></pre></td></tr></table></figure>

<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>在 <code>root</code>​&#x2F; <code>_config.yml</code>​ 中选择 <code>theme: ocean</code>​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: ocean</span><br></pre></td></tr></table></figure>

<p><strong>Ocean</strong> 使用了 feathericon 图标库，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://feathericons.com/</span><br></pre></td></tr></table></figure>

<p>菜单中的图标定义在“CSS source&#x2F;css &#x2F;_partial&#x2F;navbar.styl”中，可根据需要进行更改或添加。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes\ocean\source\css\_partial/navbar.styl</span><br></pre></td></tr></table></figure>

<p>如果你不需要开启 相册 与 关于 菜单，需要删除或者注销掉他们的图标，如下边的示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.nav-item</span><br><span class="line">  &amp;:nth-child(1)         // 主页</span><br><span class="line">    .nav-item-link</span><br><span class="line">      &amp;::before</span><br><span class="line">        content &#x27;\f12f&#x27;</span><br><span class="line">  &amp;:nth-child(2)         // 归档</span><br><span class="line">    .nav-item-link</span><br><span class="line">      &amp;::before</span><br><span class="line">        content &#x27;\f12a&#x27;</span><br><span class="line">  //&amp;:nth-child(3)         // 相册</span><br><span class="line">  //  .nav-item-link</span><br><span class="line">  //    &amp;::before</span><br><span class="line">  //      content &#x27;\f1a9&#x27;</span><br><span class="line">  //&amp;:nth-child(4)         // 关于</span><br><span class="line">  //  .nav-item-link</span><br><span class="line">  //    &amp;::before</span><br><span class="line">  //      content &#x27;\f174&#x27;</span><br></pre></td></tr></table></figure>

<p>​<img src="https://blogpublishpicture.oss-cn-guangzhou.aliyuncs.com/cnblogs/202306051602084.png" alt="image">​</p>
<p>这里 相册和关于如果不需要可以注释一下</p>
<p>这里注释只能将图标取消掉</p>
<p>取消的话需要主题配置这里注释一下</p>
<p>​<img src="https://blogpublishpicture.oss-cn-guangzhou.aliyuncs.com/cnblogs/202306051602148.png" alt="image">​</p>
<p>评论功能，开启标签和分类功能等功能目前跳过，后期再看</p>
<p>‍</p>
<p>‍</p>
<h5 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h5><p>插件安装（关于本地搜索功能）</p>
<p><a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 本地检索</p>
<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>配置 Hexo 的配置文件 <code>_config.yml</code>​</p>
<p>添加插件配置（注意：不是主题的配置文件）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br></pre></td></tr></table></figure>

<h5 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>‍</p>
<h5 id="修改标签"><a href="#修改标签" class="headerlink" title="修改标签"></a>修改标签</h5><p>如果需要需求页面的部分标签描述，需要到下面这个文件中改</p>
<p>​<img src="https://blogpublishpicture.oss-cn-guangzhou.aliyuncs.com/cnblogs/202306051602199.png" alt="image">​</p>
<p>不是很理解这个国际化语言设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories: Categories</span><br><span class="line">search: Search</span><br><span class="line">tags: Tags</span><br><span class="line">tagcloud: Tag Cloud</span><br><span class="line">tweets: Tweets</span><br><span class="line">prev: Prev</span><br><span class="line">next: Next</span><br><span class="line">comment: Comments</span><br><span class="line">archive_a: Archives</span><br><span class="line">archive_b: &quot;Archives: %s&quot;</span><br><span class="line">page: Page %d</span><br><span class="line">recent_posts: Recent Posts</span><br><span class="line">newer: Newer</span><br><span class="line">older: Older</span><br><span class="line">share: Share</span><br><span class="line">powered_by: Powered by</span><br><span class="line">rss_feed: RSS Feed</span><br><span class="line">category: Category</span><br><span class="line">tag: Tag</span><br></pre></td></tr></table></figure>

<p>这里的做法是直接用它同一路径下的 zh-CN.yml 文件内容覆盖 defalut.yml 文件内容</p>
<p>​<img src="https://blogpublishpicture.oss-cn-guangzhou.aliyuncs.com/cnblogs/202306051602273.png" alt="image">​</p>
<p>还有部分标签，是直接在主题配置文件中直接改</p>
<p>​<img src="https://blogpublishpicture.oss-cn-guangzhou.aliyuncs.com/cnblogs/202306051602349.png" alt="image">​</p>
<p>主页的这个属性的改变，在 F12 调试中找到是css样式 video-inner text-center text-white 中设置</p>
<p>​<img src="https://blogpublishpicture.oss-cn-guangzhou.aliyuncs.com/cnblogs/202306051602429.png" alt="image">​</p>
<p>搜索文件后会发现这个配置是 config.subtitle 中设置的</p>
<p>​<img src="https://blogpublishpicture.oss-cn-guangzhou.aliyuncs.com/cnblogs/202306051602566.png" alt="image">​</p>
<p>但是在这个过程中，尝试修改了挺多次，找了很多文件，不太清楚如何改</p>
<p>后面想了一下，这个属于配置文件修改，其实不管是主题配置还是项目配置修改都是生效的</p>
<p>但是需要你重启一下服务（有时候也可能是缓存问题）</p>
<p>​<img src="https://blogpublishpicture.oss-cn-guangzhou.aliyuncs.com/cnblogs/202306051602689.png" alt="image">​</p>
<p>再次访问已经OK了</p>
<p>​<img src="https://blogpublishpicture.oss-cn-guangzhou.aliyuncs.com/cnblogs/202306051602738.png" alt="image">​</p>
<p>网上有一些优化内容，这里暂时不参与和研究</p>
<p>‍</p>
<h3 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h3><p>看了一下说 Gitee 不能进行自动更新部署操作，这里还是使用 Github 作为自己的发布平台</p>
<p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>hexo 的配置文件 <code>_config.yml</code>​,  添加一下以下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; #https://github.com/Github用户名/Github用户名.github.io.git</span><br><span class="line">  branch: [branch] #published</span><br></pre></td></tr></table></figure>

<p>在自己的 Github 账号下新建仓库，</p>
<p>仓库名必须为你的<code>Github用户名.github.io</code>​</p>
<p>‍</p>
<p>在博客根目录打开Git Bash，输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当执行 <code>hexo deploy</code>​ 时，Hexo 会将 <code>public</code>​ 目录中的文件和目录推送至 <code>_config.yml</code>​ 中指定的远端仓库和分支中，并且<strong>完全覆盖</strong>该分支下的已有内容。</p>
<p>简单来说该指令集成了git的一部分操作</p>
</blockquote>
<p>或者（建议）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean                            #清除缓存       可缩写hexo c</span><br><span class="line">hexo generate                         #生成静态文件    可缩写hexo g</span><br><span class="line">hexo deploy                           #部署到Github   可缩写hexo d</span><br></pre></td></tr></table></figure>

<p>部署后访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://Github用户名.github.io/</span><br></pre></td></tr></table></figure>

<p>‍</p>
<h4 id="配置-SSH-连接"><a href="#配置-SSH-连接" class="headerlink" title="配置 SSH 连接"></a>配置 SSH 连接</h4><p>回到Git Bash中，配置Github账户信息（<code>用户名</code>​和<code>邮箱</code>​都替换成你自己Github上的）：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;`用户名`&quot;</span><br><span class="line">git config --global user.email &quot;邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>在Git Bash中输入：<code>ssh-keygen -t rsa -C &quot;你的Github邮箱&quot;</code>​ 生成ssh</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>然后按Git Bash给出的路径<code>(C:\Users\Lete.ssh)</code>​找到<code>id_rsa.pub</code>​文件 并复制其中的内容</p>
<p>进到新建的Github仓库 点击右上角<code>setting</code>​进入设置找到<code>Deploykeys</code>​选择 <code>Add Deploy keys</code>​ <code>Title</code>​随便填写 <code>Key</code>​的内容填刚才<code>id_rsa.pub</code>​文件中复制的内容</p>
<p>‍</p>
<p>修改本地Git配置，设置使用SSH协议连接GitHub。使用以下命令修改本地Git配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global url.&quot;git@github.com:&quot;.insteadOf &quot;https://github.com/&quot;</span><br></pre></td></tr></table></figure>

<p>这个命令会将Git配置中的 <code>https://github.com/</code>​ 替换为 <code>git@github.com:</code>​，从而使用SSH协议连接GitHub。</p>
<p>配置后再部署提交</p>
<p>‍</p>
<h4 id="hexo本地与部署不一致问题"><a href="#hexo本地与部署不一致问题" class="headerlink" title="hexo本地与部署不一致问题"></a>hexo本地与部署不一致问题</h4><blockquote>
<p>这部分不用管，开始搞错了，应该是他自动进行部署了，然后将部署后 public 下内容替换了整个主分支</p>
</blockquote>
<p>一般是分支部署错了</p>
<p>不要在master分支上部署pages服务，master分支是保存代码的，需要用 hexo 编译，生成 public文件夹后，将public文件夹推到另一个分支，然后在这个分支上部署pages服务。</p>
<p>修改为分支部署</p>
<p>​<img src="https://blogpublishpicture.oss-cn-guangzhou.aliyuncs.com/cnblogs/202306051602877.png" alt="image">​</p>
<p>hexo站点配置文件_config.yml中找到branch，将master改为刚刚新建的分支名；</p>
<p>回到站点文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>‍</p>
<p>‍</p>
<h4 id="将某个目录文件上传到-Github-某个仓库如何操作"><a href="#将某个目录文件上传到-Github-某个仓库如何操作" class="headerlink" title="将某个目录文件上传到 Github 某个仓库如何操作"></a>将某个目录文件上传到 Github 某个仓库如何操作</h4><p>要将某个目录文件上传到Github某个仓库，可以按照以下步骤进行操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 初始化仓库</span><br><span class="line">git init</span><br><span class="line"># 提交到本地git仓库 将文件夹中的内容添加到git仓库</span><br><span class="line">git add .</span><br><span class="line"># 提交到本地git仓库,并添加一条提交信息</span><br><span class="line">git commit -m &quot;Initial commit&quot;</span><br><span class="line">#在命令行中执行以下命令，将本地git仓库与Github上的仓库进行关联</span><br><span class="line">git remote add origin &lt;Github仓库URL&gt;</span><br><span class="line"># 进行推送</span><br><span class="line">git push -u origin master</span><br><span class="line"># 如果目标仓库和本地目录文件冲突，可以先拉去最新仓库代码再进行推送</span><br><span class="line">git pull origin master</span><br><span class="line"># 或者直接强制推送（会直接覆盖远程仓库内容），需要注意的是，强制推送可能会覆盖其他人提交的代码，因此需要谨慎使用。</span><br><span class="line">git push --force origin master</span><br></pre></td></tr></table></figure>

<p>‍</p>
<h3 id="hexo完成github-action自动部署"><a href="#hexo完成github-action自动部署" class="headerlink" title="hexo完成github action自动部署"></a>hexo完成github action自动部署</h3><p>这里实现的功能是建立了一个分支 ph-pages ，源项目内容放在 master 主分支下，实现自动部署主分支到分支上（同一个仓库下）</p>
<p>在实现这个前，先获取一个授权 token，这里必须勾选repo 项 和 workflows 项</p>
<p>访问 Github-&gt;头像（右上角）-&gt;Settings-&gt;Developer Settings-&gt;Personal access tokens-&gt;generate new token,</p>
<p>创建的 Token 名称随意，有效期建议无限期限。</p>
<p>​<img src="https://blogpublishpicture.oss-cn-guangzhou.aliyuncs.com/cnblogs/202306051602954.png" alt="image">​</p>
<p>点击生成</p>
<blockquote>
<p>token 只会显示这一次，之后将无法查看，所以务必保证你已经记录下了 Token。之后如果忘记了就只能重新生成重新配置了。</p>
</blockquote>
<p>在项目 master 分支下新建文件夹</p>
<p>在 hexo 项目 中新建<code>.github</code>​文件夹,注意开头是有个<code>.</code>​的。然后在<code>.github</code>​ 内新建 <code>workflows</code>​ 文件夹，再在 <code>workflows</code>​ 文件夹内新建 <code>autodeploy.yml</code>​,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workflows</span><br><span class="line">autodeploy.yml</span><br></pre></td></tr></table></figure>

<p>在<code>[Blogroot]/.github/workflows/autodeploy.yml</code>​ 里面输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: 自动部署</span><br><span class="line"># 当有改动推送到master分支时，启动Action</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master</span><br><span class="line">      # 你提交的主分支名称</span><br><span class="line">  release:</span><br><span class="line">    types:</span><br><span class="line">      - published</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  # 部署执行的自动工作</span><br><span class="line">  deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: 检查分支</span><br><span class="line">        uses: actions/checkout@v3</span><br><span class="line">        with:</span><br><span class="line">          ref: master</span><br><span class="line"></span><br><span class="line">      - name: 安装 Node</span><br><span class="line">        uses: actions/setup-node@v3</span><br><span class="line">        with:</span><br><span class="line">          node-version: &quot;16.x&quot;</span><br><span class="line"></span><br><span class="line">      - name: 安装 Hexo</span><br><span class="line">        run: |</span><br><span class="line">          export TZ=&#x27;Asia/Shanghai&#x27;</span><br><span class="line">          npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">      - name: 缓存 Hexo</span><br><span class="line">        id: cache-npm</span><br><span class="line">        uses: actions/cache@v3</span><br><span class="line">        env:</span><br><span class="line">          cache-name: cache-node-modules</span><br><span class="line">        with:</span><br><span class="line">          path: node_modules</span><br><span class="line">          key: $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class="line">          restore-keys: |</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-build-</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-</span><br><span class="line"></span><br><span class="line">      - name: 安装依赖</span><br><span class="line">        if: $&#123;&#123; steps.cache-npm.outputs.cache-hit != &#x27;true&#x27; &#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          npm install gulp-cli -g #全局安装gulp</span><br><span class="line">          npm install --save</span><br><span class="line"></span><br><span class="line">      - name: 生成静态文件</span><br><span class="line">        run: |</span><br><span class="line">          hexo clean</span><br><span class="line">          hexo generate</span><br><span class="line"></span><br><span class="line">      - name: 部署到Github</span><br><span class="line">        uses: JamesIves/github-pages-deploy-action@v4</span><br><span class="line">        with:</span><br><span class="line">          token:  $&#123;&#123; secrets.ACTION_TOKEN &#125;&#125;</span><br><span class="line">          repository-name: Lluo-liang/Lluo-liang.github.io</span><br><span class="line">          branch: ph-pages</span><br><span class="line">          folder: public</span><br><span class="line">          commit-message: &quot;$&#123;&#123; github.event.head_commit.message &#125;&#125; Updated By Github Actions&quot;</span><br></pre></td></tr></table></figure>

<p>部署到 Github 下几个配置注意一下，其他内容大差不差</p>
<p>​<img src="https://blogpublishpicture.oss-cn-guangzhou.aliyuncs.com/cnblogs/202306051602033.png" alt="image">​</p>
<p>之后如果需要自己到仓库的 Settings-&gt;Secrets-&gt;actions 下添加环境变量，变量名参考脚本中出现的，依次添加（有些环境变量是GitHub Actions自带的一个环境变量）。</p>
<p>这里配置了一个 ACTION_TOKEN 的环境变量</p>
<p>​<img src="https://blogpublishpicture.oss-cn-guangzhou.aliyuncs.com/cnblogs/202306051602094.png" alt="image">​</p>
<p>这里的GitHub Pages的设置中 是 ph-pages分支。</p>
<p>‍</p>
<p>编辑一下 git 上传的屏蔽项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">.deploy_git*/</span><br><span class="line">.idea</span><br><span class="line">themes/ocean/.git</span><br></pre></td></tr></table></figure>

<p>替换最后一行内容为自己当前使用的主题</p>
<p>配置完后进行提交推送</p>
<p>‍</p>
<p>部署进度查看</p>
<p>看实际的一个部署情况，可以在 Action 中 查看</p>
<p>​<img src="https://blogpublishpicture.oss-cn-guangzhou.aliyuncs.com/cnblogs/202306051602171.png" alt="image">​</p>
<p>选择第一个，点击进去看，点击 deploy 可以查看窗口进度和实际完成情况</p>
<p>​<img src="https://blogpublishpicture.oss-cn-guangzhou.aliyuncs.com/cnblogs/202306051602232.png" alt="image">​</p>
<p>‍</p>
<p>如果是需要安全方面考虑，不打算将自己的源文件内容泄露，也可以建立另外一个仓库，这个仓库设置为私有，</p>
<p>也可以进行自动部署到这个公共仓库中</p>
<p>‍</p>
]]></content>
      <categories>
        <category>_posts</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>04_深入浅出索引（上）</title>
    <url>//post/04_early-simple-index-top-27akdi.html</url>
    <content><![CDATA[<h1 id="04-深入浅出索引（上）"><a href="#04-深入浅出索引（上）" class="headerlink" title="04_深入浅出索引（上）"></a>04_深入浅出索引（上）</h1><p>‍</p>
<h3 id="索引的概念"><a href="#索引的概念" class="headerlink" title="索引的概念"></a>索引的概念</h3><p>索引的概念：索引是一种数据结构，用于提高数据库查询效率。就像一本书的目录一样，索引可以帮助数据库在大量数据中快速找到需要的数据，减少查询时间和资源消耗。</p>
<p>除了提高查询效率，索引还可以帮助数据库实现唯一性约束、主键约束和外键约束等数据完整性约束。</p>
<p>例如，在一个用户表中，我们可以使用用户ID作为主键，并在ID列上创建一个唯一索引，以保证每个用户ID都是唯一的。</p>
<p>‍</p>
<h3 id="常见索引模型"><a href="#常见索引模型" class="headerlink" title="常见索引模型"></a>常见索引模型</h3><p>常见索引模型：索引模型是指索引的数据结构和组织方式。常见的索引模型有哈希表、有序数组和搜索树等。</p>
<p>哈希表：哈希表是一种将键映射到值的数据结构，它通过哈希函数将键转换为数组的下标，然后将值存储在该下标处。</p>
<p>哈希表适用于等值查询场景，例如在一个存储用户信息的表中，我们可以使用用户ID作为哈希表的键，来快速查找某个用户的信息。</p>
<p>有序数组：有序数组是一种按照元素大小顺序排列的数组，它适用于等值查询和范围查询场景。</p>
<p>例如，在一个按照身份证号排序的用户表中，我们可以使用二分法快速查找某个身份证号对应的用户信息。但是，<strong>有序数组的更新成本较高，适用于静态存储引擎</strong>。</p>
<p>搜索树：搜索树是一种按照元素大小顺序组织的树形结构，它适用于等值查询和范围查询场景。</p>
<p>例如，在一个按照用户ID排序的用户表中，我们可以使用二叉搜索树快速查找某个用户ID对应的用户信息。但是，搜索树的查询效率高，但写入和更新成本高，不适用于大规模数据存储。</p>
<p>扩充例子：在一个电商网站的订单表中，我们可以使用订单ID作为哈希表的键，来快速查找某个订单的信息。在一个按照订单时间排序的订单表中，我们可以使用二分法快速查找某个时间段内的订单信息。在一个按照商品价格排序的商品表中，我们可以使用B树来快速查找某个价格区间内的商品信息。</p>
<p>二叉树虽然是搜索效率最高的，但是实际上大多数的数据库存储却并不使用二叉树，因为索引不仅存在内存中，还要写入磁盘。</p>
<p>为了让查询尽量少地读磁盘，我们需要让查询过程访问尽量少的数据块。因此，我们应该使用“N叉”树来代替二叉树。在“N叉”树中，“N”的大小取决于数据块的大小。</p>
<p>以InnoDB的一个整数字段索引为例，这个“N”大约是1200。当这棵树高为4时，就可以存储1200的3次方个值，这已经达到了17亿。考虑到树根的数据块总是在内存中，一个10亿行的表上一个整数字段的索引，查找一个值最多只需要访问3次磁盘。实际上，树的第二层也有很大概率在内存中，那么访问磁盘的平均次数就更少了。</p>
<p>扩充阐述：在实际的数据库应用中，磁盘I&#x2F;O是非常耗时的操作。因此，我们需要尽量减少磁盘I&#x2F;O的次数，以提高数据库的查询效率。为了实现这个目标，数据库存储引擎通常会采用B树、B+树、R树等数据结构来实现索引。这些数据结构都是基于“N叉”树的结构，能够有效地减少磁盘I&#x2F;O的次数，提高查询效率。</p>
<p>例如，在一个电商网站的商品表中，我们可以使用商品价格作为B+树的键，来快速查找某个价格区间内的商品信息。B+树在叶子节点上保存了所有数据记录的指针，而非像B树那样在每个节点上都保存数据记录，因此能够减少磁盘I&#x2F;O的次数，提高查询效率。</p>
<p>总结：为了提高数据库的查询效率，我们需要选择合适的索引模型，并采用相应的数据结构来实现索引。在选择数据结构时，需要考虑具体的查询场景和存储引擎特点。常见的索引模型有哈希表、有序数组和搜索树等，而常用的数据结构有B树、B+树、R树等。通过选择合适的索引模型和数据结构，可以有效地提高数据库的查询效率，降低磁盘I&#x2F;O的次数，从而提升数据库的整体性能。</p>
<p>‍</p>
<p><strong>数据库底层存储的核心就是基于这些数据模型的。每碰到一个新数据库，我们需要先关注它的数据模型，这样才能从理论上分析出这个数据库的适用场景。</strong></p>
<p>‍</p>
<h3 id="B-树和-B-树"><a href="#B-树和-B-树" class="headerlink" title="B 树和 B+ 树"></a>B 树和 B+ 树</h3><p>B树和B+树都是多路搜索树，是一种常用的数据结构，在数据库、文件系统等领域广泛应用。它们不是二叉树，而是多叉树。</p>
<p>B树和B+树的主要区别在于它们的索引结构和叶子节点的存储方式不同。B树的每个节点都包含键值和指向子节点的指针，而B+树的非叶子节点只包含键值和指向子节点的指针，<strong>而所有的数据都存储在叶子节点中。</strong></p>
<p>B树的搜索过程比较复杂，因为需要在非叶子节点和叶子节点之间不断切换，而B+树的搜索过程更加简单，因为只需要在叶子节点中进行搜索。此外，B+树的叶子节点是通过链表相连的，可以方便地进行范围查询和遍历。</p>
<p>因此，B+树通常比B树更适合在数据库中使用，<strong>因为它能够更快地进行范围查询和遍历</strong>。但是，在某些场景下，B树也可能比B+树更适合使用，例如需要快速插入和删除数据的场景。</p>
<p>‍</p>
<h3 id="InnoDB-的索引模型"><a href="#InnoDB-的索引模型" class="headerlink" title="InnoDB 的索引模型"></a>InnoDB 的索引模型</h3><p>在InnoDB中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。</p>
<p>InnoDB 使用的是 B+ 树索引模型，所以数据都是存储在 B+ 树中的，每一个索引在 InnoDB 里面对应一棵 B+ 树。</p>
<p><strong>索引类型分为主键索引和非主键索引。</strong></p>
<ul>
<li>主键索引的<strong>叶子节点存的是整行数据</strong>。在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。</li>
<li>非主键索引的<strong>叶子节点内容是主键的值</strong>。在 InnoDB 里，<strong>非主键索引也被称为二级索引（secondary index）。</strong></li>
</ul>
<p>举个例子来说，假设我们有一个学生表，其中主键为学生ID。如果我们要查询学号为1001的学生的所有信息，如果使用主键索引，则只需要搜索ID这棵B+树，而如果使用非主键索引，则需要先搜索学号这棵B+树得到ID的值为1001，再到ID索引树搜索一次，这个过程称为回表。</p>
<p>因此，使用主键索引查询可以减少一次搜索，提高查询效率。</p>
<p>在应用中我们应该尽量使用主键查询，以减少查询时间和提高性能。</p>
<p>但是，在实际使用中，我们也需要根据具体情况来选择使用哪种索引类型。例如，如果我们需要查询学生的所有信息，而不仅仅是学号，那么使用主键索引就无法满足我们的需求，这时候就需要使用非主键索引。</p>
<p>InnoDB的索引模型是数据库中非常重要的一个概念，不同的索引类型在查询效率和使用场景上都有着不同的优缺点。我们需要根据具体需求来选择使用哪种索引类型，以提高数据库的性能和效率。</p>
<p>‍</p>
<h3 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h3><p>索引维护是数据库中非常重要的一部分，它确保了数据的快速查询和排序。</p>
<p>在B+树中，为了维护索引有序性，在插入新值的时候需要做必要的维护。</p>
<p>这个过程中，当插入的数据页已经满了，就需要进行页分裂操作。这个过程会申请一个新的数据页，并将部分数据挪动过去，影响了性能和数据页的利用率。</p>
<p>不过，有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并，这个过程可以认为是分裂过程的逆过程。</p>
<p>另外，对于<strong>自增主键的使用场景，我们需要分析哪些场景下应该使用自增主键，而哪些场景下不应该。</strong></p>
<p>自增主键的插入数据模式，是递增插入的场景，每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。</p>
<p>而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。</p>
<p>此外，从存储空间的角度来看，如果用身份证号等字符串类型的字段做主键，那么每个非主键索引的叶子节点上都是主键的值，<strong>占用的空间较大</strong>。因此，自增主键往往是更合理的选择。</p>
<p>但是，对于只有一个索引且必须是唯一索引的场景，可以直接将这个索引设置为业务字段做主键，避免每次查询需要搜索两棵树。</p>
<p>假设你在设计一个订单系统，其中包含订单的ID、用户ID、商品ID、数量、价格等信息。如果你需要在该系统中快速查找某个订单的信息，可以在订单ID字段上建立一个唯一索引，这样就可以快速查找到该订单的信息。但是，如果你需要根据用户ID或商品ID等信息进行查询，那么就需要在这些字段上建立索引，以保证查询的速度和效率。</p>
<p>在这种情况下，如果使用自增主键作为主键，可以保证数据的有序插入和查询，提高了查询效率。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。此外，自增主键的数据类型通常为整型，占用的存储空间相对较小，可以节省存储空间。</p>
<p>但是，如果你的业务场景需要根据用户ID或商品ID等字段进行频繁的查询和排序，那么就应该考虑将这些字段作为主键。在这种情况下，使用自增主键可能会导致数据的插入顺序与查询顺序不一致，降低查询效率。</p>
<p>因此，在设计主键时，需要根据具体业务场景进行选择。</p>
<p>‍</p>
]]></content>
      <tags>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/06/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
